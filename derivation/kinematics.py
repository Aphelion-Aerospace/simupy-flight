import numpy


def kinematics_state_function(self, t, p_x, p_y, p_z, v_x, v_y, v_z, q_0, q_1, q_2, q_3, omega_X, omega_Y, omega_Z, A_X, A_Y, A_Z, alpha_X, alpha_Y, alpha_Z, c_q):
    [g_x, g_y, g_z] = self.gravity(p_x,p_y,p_z).ravel()
    x0 = q_0**2
    x1 = q_1**2
    x2 = q_2**2
    x3 = q_3**2
    x4 = 1/(x0 + x1 + x2 + x3)
    x5 = 2*A_Y
    x6 = q_0*q_3
    x7 = q_1*q_2
    x8 = 2*A_Z
    x9 = q_0*x8
    x10 = q_3*x8
    x11 = 2*A_X
    x12 = (1/2)*omega_X
    x13 = (1/2)*q_2
    x14 = (1/2)*q_3
    x15 = (1/2)*omega_Y
    x16 = (1/2)*omega_Z
    return (numpy.array([v_x, v_y, v_z, x4*(A_X*x0 + A_X*x1 - A_X*x2 - A_X*x3 + g_x*x0 + g_x*x1 + g_x*x2 + g_x*x3 + q_1*x10 + q_2*x9 - x5*x6 + x5*x7), x4*(A_Y*x0 - A_Y*x1 + A_Y*x2 - A_Y*x3 + g_y*x0 + g_y*x1 + g_y*x2 + g_y*x3 - q_1*x9 + q_2*x10 + x11*x6 + x11*x7), x4*(A_Z*x0 - A_Z*x1 - A_Z*x2 + A_Z*x3 + g_z*x0 + g_z*x1 + g_z*x2 + g_z*x3 + q_0*q_1*x5 - q_0*q_2*x11 + q_1*q_3*x11 + q_2*q_3*x5), c_q*q_0 - omega_Y*x13 - omega_Z*x14 - q_1*x12, c_q*q_1 - omega_Y*x14 + omega_Z*x13 + q_0*x12, c_q*q_2 + q_0*x15 - q_1*x16 + q_3*x12, c_q*q_3 + q_0*x16 + q_1*x15 - q_2*x12, alpha_X, alpha_Y, alpha_Z]))

def ic_from_planetodetic(self, lamda_D, phi_D, h_D, V_N, V_E, V_D, psi, theta, phi, omega_X, omega_Y, omega_Z):
    [p_x, p_y, p_z] = self.planetodetics.pd2pcf(lamda_D,phi_D,h_D).ravel()
    x0 = numpy.sin(lamda_D)
    x1 = numpy.cos(lamda_D)
    x2 = numpy.cos(phi_D)
    x3 = V_D*x2
    x4 = numpy.sin(phi_D)
    x5 = V_N*x4
    x6 = numpy.cos(phi)
    x7 = numpy.cos(psi)
    x8 = x1*x7
    x9 = x6*x8
    x10 = numpy.sin(theta)
    x11 = x10*x2
    x12 = numpy.sin(phi)
    x13 = numpy.sin(psi)
    x14 = x13*x2
    x15 = numpy.cos(theta)
    x16 = x15*x4
    x17 = x13*x15
    x18 = x12*x13
    x19 = x1*x10
    x20 = x11*x7
    x21 = x0*x6
    x22 = x13*x21
    x23 = x15*x2
    x24 = x12*x23
    x25 = x10*x4
    x26 = x0*x7
    x27 = x12*x26
    x28 = numpy.sqrt(-x0*x17 - x0*x24 + x1*x11 + x12*x14 - x16*x6 - x16*x8 + x18*x19 + x20*x6 + x22*x4 - x25*x27 + x9 + 1)
    x29 = x12*x8
    x30 = x18*x4
    x31 = x13*x6
    x32 = x26*x6
    x33 = (1/2)/x28
    return (numpy.array([p_x, p_y, p_z, -V_E*x0 - self.planetodetics.omega_p*p_y - x1*x3 - x1*x5, V_E*x1 + self.planetodetics.omega_p*p_x - x0*x3 - x0*x5, -V_D*x4 + V_N*x2, (1/2)*x28, x33*(x0*x30 - x12*x16 + x12*x20 - x14*x6 - x19*x31 + x21*x23 + x25*x32 + x29), -x33*(x1*x23*x6 + x1*x30 + x10*x22 + x23*x7 + x25*x9 + x25 - x27), x33*(x0*x10*x18 + x0*x11 + x1*x17 + x1*x24 - x1*x31*x4 - x16*x26 + x25*x29 + x32), omega_X, omega_Y, omega_Z]))

def kinematics_output_function(self, t, p_x, p_y, p_z, v_x, v_y, v_z, q_0, q_1, q_2, q_3, omega_X, omega_Y, omega_Z):
    [g_x, g_y, g_z] = self.gravity(p_x,p_y,p_z).ravel()
    [lamda_D, phi_D, h_D] = self.planetodetics.pcf2pd(p_x,p_y,p_z).ravel()
    lamda_D = lamda_D - self.planetodetics.omega_p*t
    [W_N, W_E, W_D] = self.winds(t,lamda_D,phi_D,h_D).ravel()
    rho = self.density(t,lamda_D,phi_D,h_D)
    c_s = self.speed_of_sound(t,lamda_D,phi_D,h_D)
    mu = self.viscosity(t,lamda_D,phi_D,h_D)
    x0 = numpy.cos(lamda_D)
    x1 = self.planetodetics.omega_p*t
    x2 = numpy.cos(x1)
    x3 = x0*x2
    x4 = numpy.sin(lamda_D)
    x5 = numpy.sin(x1)
    x6 = x4*x5
    x7 = q_0*q_3
    x8 = q_1**2
    x9 = q_2**2
    x10 = q_0**2
    x11 = q_3**2
    x12 = x10 + x11
    x13 = 1/(x12 + x8 + x9)
    x14 = 2*x13
    x15 = x14*x7
    x16 = q_1*q_2
    x17 = x14*x16
    x18 = x15 + x17
    x19 = x0*x5
    x20 = x2*x4
    x21 = x13*x8
    x22 = x13*x9
    x23 = -x22
    x24 = x10*x13
    x25 = x11*x13
    x26 = x24 - x25
    x27 = x21 + x23 + x26
    x28 = numpy.sin(phi_D)
    x29 = q_0*q_2
    x30 = x14*x29
    x31 = q_1*q_3
    x32 = x14*x31
    x33 = -x30 + x32
    x34 = numpy.cos(phi_D)
    x35 = -x3*x34 + x34*x6
    x36 = -x19*x34 - x20*x34
    x37 = -x21
    x38 = q_0*q_1
    x39 = x14*x38
    x40 = q_2*q_3
    x41 = x14*x40
    x42 = self.planetodetics.omega_p**2
    x43 = lamda_D + x1
    x44 = numpy.cos(x43)
    x45 = W_E*x44
    x46 = 2*v_y
    x47 = W_N*x34
    x48 = 2*v_z
    x49 = self.planetodetics.omega_p*p_x
    x50 = W_D*x28
    x51 = numpy.sin(x43)
    x52 = W_E*x51
    x53 = 2*v_x
    x54 = self.planetodetics.omega_p*p_y
    x55 = W_D*x34
    x56 = x44*x55
    x57 = x51*x55
    x58 = 2*x49
    x59 = 2*x54
    x60 = W_N*x28
    x61 = x44*x60
    x62 = x51*x60
    x63 = W_D**2 + W_E**2 + W_N**2 + p_x**2*x42 + p_y**2*x42 + v_x**2 + v_y**2 + v_z**2 - x45*x46 + x45*x58 - x46*x49 + x46*x57 + x46*x62 - x47*x48 + x48*x50 + x52*x53 + x52*x59 + x53*x54 + x53*x56 + x53*x61 + x56*x59 - x57*x58 - x58*x62 + x59*x61
    x64 = numpy.sqrt(x63*((x63>0.0)+0.5*(x63==0.0)))
    x65 = v_z - x47 + x50
    x66 = -x8
    x67 = -x9
    x68 = v_x + x52 + x54 + x56 + x61
    x69 = 2*x68
    x70 = v_y - x45 - x49 + x57 + x62
    x71 = 2*x70
    x72 = x10 - x11
    x73 = 2*x65
    x74 = x13*(x69*(x16 - x7) + x70*(x66 + x72 + x9) + x73*(x38 + x40))/x64
    x75 = 2*self.planetodetics.omega_p
    x76 = v_x*x44
    x77 = v_y*x51
    x78 = x49*x51
    x79 = x44*x54
    return (numpy.array([p_x, p_y, p_z, v_x, v_y, v_z, q_0, q_1, q_2, q_3, omega_X, omega_Y, omega_Z, lamda_D, phi_D, h_D, numpy.arctan2(x18*(x3 - x6) + x27*(-x19 - x20), x18*(-x19*x28 - x20*x28) + x27*(-x28*x3 + x28*x6) + x33*x34), -numpy.arcsin(x18*x36 + x27*x35 - x28*x33), numpy.arctan2(-x28*(x39 + x41) + x35*(-x15 + x17) + x36*(x22 + x26 + x37), -x28*(x23 + x24 + x25 + x37) + x35*(x30 + x32) + x36*(-x39 + x41)), rho, c_s, mu, x64, numpy.arctan2(x13*(x65*(x12 + x66 + x67) + x69*(x29 + x31) + x71*(-x38 + x40)), x13*(x68*(x67 + x72 + x8) + x71*(x16 + x7) + x73*(-x29 + x31))), numpy.arcsin(numpy.select([numpy.greater(x74, 1.0),numpy.less(x74, -1.0),numpy.greater(x64, 0.0)], [1.0,-1.0,x74], default=0.0)), x13*(omega_X*x10 + omega_X*x11 + omega_X*x8 + omega_X*x9 + x29*x75 - x31*x75), x13*(omega_Y*x10 + omega_Y*x11 + omega_Y*x8 + omega_Y*x9 - x38*x75 - x40*x75), x13*(omega_Z*x10 + omega_Z*x11 + omega_Z*x8 + omega_Z*x9 - self.planetodetics.omega_p*x10 - self.planetodetics.omega_p*x11 + self.planetodetics.omega_p*x8 + self.planetodetics.omega_p*x9), v_z*x34 - x28*x76 - x28*x77 + x28*x78 - x28*x79, -v_x*x51 + v_y*x44 - x44*x49 - x51*x54, -v_z*x28 - x34*x76 - x34*x77 + x34*x78 - x34*x79, W_N, W_E, W_D]))
